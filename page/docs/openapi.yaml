openapi: 3.1.0
servers:
  - url: https://direktiv.io
info:
  version: 0.1.0
  title: Direktiv APIv2 Reference
  x-logo:
    altText: Direktiv logo
  description: >
    Welcome to the Direktiv API documentation. Our API is based on the principle
    of REST.


    # Introduction

    All request and response bodies are `application/json` format.


    # Versioning

    This is v2 api, v1 endpoints will be removed as we implement them in v2. Unitl the transition is finished this API documentation is incomplete.


    # Methods

    We use the following http methods:

    | value | description |

    |-----------|-------|

    | `GET` | Get one object or a list of objects |

    | `DELETE` | Delete one object  |

    | `POST` | Create one object |

    | `PUT` | Update(replace) one object |

    Requests with methods `GET` and `DELETE` should have empty bodies.

    For other methods, request body cannot be empty.


    # Responses

    For successful requests processing, the API will response with http status code `200` ‚ü∂ `OK`.

    Successful response always have a json body with field `data`.

    Field `data` could be an `object`, or an `array`.


    # Errors

    If the API couldn't process the request for any reason, the response body will be a json object with a single field `error`.


    ### Error Body


    ```json

    {
      "error": {
          "code": "internal",
          "message": "server is currently under maintenance",
        }
    }

    ```


    Field error.code is one of the following values:


    | value | description |

    |-----------|-------|

    | `internal` | some internal server error  |

    | `request_path_not_found` | request path is not recognized (not found)  |

    | `request_method_not_allowed` | method is not allowed for the used path  |

    | `request_body_not_json` | request body is not valid json  |

    | `request_body_bad_json_schema` | request body has invalid json schema |

    | `resource_not_found` | requested resource id (namespace for example) not found |

    | `resource_already_exists` | trying to insert a resource with duplicated id |

    | `resource_id_invalid` | requested resource id (namespace for example) is invalid |

    | `request_data_invalid` | body is valid json but has validation errors |



    Http response codes for error responses could be one of the following: 

    | value | description |

    |-----------|-------|

    | `400` | invalid user input (in path, in method, in body)  |

    | `404` | resource not found  |

    | `403` | access denied for something wrong with the token |

    | `500` | something went wrong with the server |
tags:
  - name: server
    description: Miscellaneous server endpoints
  - name: services
    description: Endpoints for managing services
  - name: registries
    description: Endpoints for managing registries
  - name: gateway
    description: Endpoints for fetchig API gateway information
  - name: files
    description: Endpoints reading and changing filesystem tree nodes
x-tagGroups:
  - name: Endpoints
    tags:
      - files
      - services
      - registries
      - gateway
      - server
components:
  parameters:
    namespace:
      name: namespace
      in: path
      schema:
        type: string
      required: true
    serviceID:
      name: serviceID
      in: path
      schema:
        type: string
      required: true
    podID:
      name: podID
      in: path
      schema:
        type: string
      required: true
    registryID:
      name: registryID
      in: path
      schema:
        type: string
      required: true
    route-path:
      name: route-path
      in: path
      schema:
        type: string
      required: true
  schemas:
    route:
      type: object
      properties:
        file_path:
          type: string
          description: path to file in file tree
          example: /my/path.yaml
        path:
          type: string
          description: full pattern including path_extension
          example: /my/path/{id}
        allow_anonymous:
          type: boolean
          description: if access is allowed if there are not authentication plugins or
            authentication failed
        methods:
          type: array
          items:
            type: string
            enum:
              - GET
              - DELETE
              - HEAD
              - POST
              - PUT
              - TRACE
              - PATH
              - OPTIONS
              - CONNECT
              - "*"
            description: HTTP method to listen to, `*` for all methods
        errors:
          type: array
          items:
            type: string
            description: list of errors in plugins and the route itself, e.g. configuration
              errors in plugins
        warnings:
          type: array
          items:
            type: string
            description: list of warnings in plugins and the route itself
            example: no target plugin set
        plugins:
          type: object
          properties:
            outbound:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                    description: name of the outbound plugin
                    example: js-outbound
                  configuration:
                    type: {}
                    description: configuration for the plugin. can be of any type.
                    nullable: true
                    example:
                      script: sleep(5)
            inbound:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                    description: name of the inbound plugin
                    example: acl
                  configuration:
                    type: {}
                    description: configuration for the plugin. can be of any type.
                    nullable: true
                    example:
                      allowed-groups:
                        - group1
                        - group2
            auth:
              type: array
              description: all auth plugins are getting executed. first successful
                authentication sets the consumer.
              items:
                type: object
                properties:
                  type:
                    type: string
                    description: name of the auth plugin
                    example: basic-auth
                  configuration:
                    type: {}
                    description: configuration for the plugin. can be of any type.
                    nullable: true
                    example:
                      add_username_header: true
            target:
              type: object
              nullable: true
              properties:
                type:
                  type: string
                  description: name of the target plugin. can only be one.
                  example: target-flow
                configuration:
                  type: {}
                  description: configuration for the plugin. can be of any type.
                  nullable: true
                  example:
                    flow: /directory/myflow.yaml
    FileNodeWithoutData:
      type: object
      description: filesystem node data
      properties:
        path:
          type: string
          description: path of the node
        type:
          type: string
          enum:
            - directory
            - file
            - workflow
            - service
            - endpoint
            - consumer
          description: type of the node
        mimeType:
          type: string
          description: (only with type != directory) mime type of the file content
        size:
          type: number
          description: (only with type != directory) file size in bytes
        createdAt:
          type: string
          description: timestamp of node creation date
        updatedAt:
          type: string
          description: timestamp of node last updating date
paths:
  "/api/v2/namespaces/{namespace}/files/{path}":
    get:
      tags:
        - files
      summary: Read any node in the filesystem tree
      parameters:
        - name: namespace
          in: path
          schema:
            type: string
          required: true
        - name: path
          in: path
          schema:
            type: string
            description: path of the node to read (with slashes)
          required: true
      responses:
        "200":
          description: filesystem tree node data
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    allOf:
                      - type: object
                        description: filesystem node data
                        properties:
                          path:
                            type: string
                            description: path of the node
                          type:
                            type: string
                            enum:
                              - directory
                              - file
                              - workflow
                              - service
                              - endpoint
                              - consumer
                            description: type of the node
                          mimeType:
                            type: string
                            description: (only with type != directory) mime type of the file content
                          size:
                            type: number
                            description: (only with type != directory) file size in bytes
                          createdAt:
                            type: string
                            description: timestamp of node creation date
                          updatedAt:
                            type: string
                            description: timestamp of node last updating date
                      - type: object
                        description: files node data
                        properties:
                          data:
                            type: string
                            description: (only with type != directory) base64 encoded string of the file
                              content
                          children:
                            type: array
                            description: list of files child nodes
                            items:
                              $ref: "#/paths/~1api~1v2~1namespaces~1%7Bnamespace%7D~1files~1%7Bpath%7D/get/re\
                                sponses/200/content/application~1json/schema/pr\
                                operties/data/allOf/0"
    delete:
      tags:
        - files
      summary: Delete any node in the filesystem tree
      parameters:
        - $ref: "#/paths/~1api~1v2~1namespaces~1%7Bnamespace%7D~1files~1%7Bpath%7D/get/pa\
            rameters/0"
        - name: path
          in: path
          schema:
            type: string
            description: path of the node to delete (with slashes)
          required: true
      responses:
        "200":
          description: filesystem tree node deleted successfully
    post:
      tags:
        - files
      summary: Create a node in the filesystem tree
      parameters:
        - $ref: "#/paths/~1api~1v2~1namespaces~1%7Bnamespace%7D~1files~1%7Bpath%7D/get/pa\
            rameters/0"
        - name: path
          in: path
          schema:
            type: string
            description: path of the parent node (with slashes)
          required: true
      requestBody:
        description: User data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: name of the node(file or directory name)
                type:
                  type: string
                  enum:
                    - directory
                    - file
                    - workflow
                    - service
                    - endpoint
                    - consumer
                  description: type of the node
                mimeType:
                  type: string
                  description: (only with type != directory) mime type of the file content
                data:
                  type: string
                  description: (only with type != directory) base64 encoded string of the file
                    content
      responses:
        "200":
          description: filesystem tree node created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/paths/~1api~1v2~1namespaces~1%7Bnamespace%7D~1files~1%7Bpath%7D/get/re\
                      sponses/200/content/application~1json/schema/properties/d\
                      ata/allOf/0"
    patch:
      tags:
        - files
      summary: Update a node in the filesystem tree (change path or data)
      parameters:
        - $ref: "#/paths/~1api~1v2~1namespaces~1%7Bnamespace%7D~1files~1%7Bpath%7D/get/pa\
            rameters/0"
        - name: path
          in: path
          schema:
            type: string
            description: path of the parent node (with slashes)
          required: true
      requestBody:
        description: User data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                path:
                  type: string
                  description: the new absolute path of the node(file or directory name)
                data:
                  type: string
                  description: (only with type != directory) base64 encoded string of the file
                    content
      responses:
        "200":
          description: filesystem tree node updated successfully
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/paths/~1api~1v2~1namespaces~1%7Bnamespace%7D~1files~1%7Bpath%7D/get/re\
                      sponses/200/content/application~1json/schema/properties/d\
                      ata/allOf/0"
                  - type: object
                    description: files node data
                    properties:
                      data:
                        type: string
                        description: (only with type != directory) base64 encoded string of the file
                          content
  "/api/v2/namespaces/{namespace}/gateway/consumers":
    get:
      tags:
        - gateway
      summary: Get all consumers
      parameters:
        - $ref: "#/paths/~1api~1v2~1namespaces~1%7Bnamespace%7D~1files~1%7Bpath%7D/get/pa\
            rameters/0"
      responses:
        "200":
          description: Consumers for gateway in the namespace
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        username:
                          type: string
                          description: unique username
                        password:
                          type: string
                          description: password for basic authentication
                        api_key:
                          type: string
                          description: api key for the user
                        tags:
                          type: array
                          nullable: true
                          items:
                            type: string
                            description: tag identifier
                        groups:
                          type: array
                          nullable: true
                          items:
                            type: string
                            description: group identifier
  "/api/v2/namespaces/{namespace}/gateway/routes":
    get:
      tags:
        - gateway
      summary: Get all routes
      parameters:
        - $ref: "#/paths/~1api~1v2~1namespaces~1%7Bnamespace%7D~1files~1%7Bpath%7D/get/pa\
            rameters/0"
        - in: query
          name: path
          schema:
            type: string
          description: Filter result by path string
      responses:
        "200":
          description: Routes for gateway in the namespace
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        file_path:
                          type: string
                          description: path to file in file tree
                          example: /my/path.yaml
                        path:
                          type: string
                          description: full pattern including path_extension
                          example: /my/path/{id}
                        allow_anonymous:
                          type: boolean
                          description: if access is allowed if there are not authentication plugins or
                            authentication failed
                        methods:
                          type: array
                          items:
                            type: string
                            enum:
                              - GET
                              - DELETE
                              - HEAD
                              - POST
                              - PUT
                              - TRACE
                              - PATH
                              - OPTIONS
                              - CONNECT
                              - "*"
                            description: HTTP method to listen to, `*` for all methods
                        errors:
                          type: array
                          items:
                            type: string
                            description: list of errors in plugins and the route itself, e.g. configuration
                              errors in plugins
                        warnings:
                          type: array
                          items:
                            type: string
                            description: list of warnings in plugins and the route itself
                            example: no target plugin set
                        plugins:
                          type: object
                          properties:
                            outbound:
                              type: array
                              items:
                                type: object
                                properties:
                                  type:
                                    type: string
                                    description: name of the outbound plugin
                                    example: js-outbound
                                  configuration:
                                    type: {}
                                    description: configuration for the plugin. can be of any type.
                                    nullable: true
                                    example:
                                      script: sleep(5)
                            inbound:
                              type: array
                              items:
                                type: object
                                properties:
                                  type:
                                    type: string
                                    description: name of the inbound plugin
                                    example: acl
                                  configuration:
                                    type: {}
                                    description: configuration for the plugin. can be of any type.
                                    nullable: true
                                    example:
                                      allowed-groups:
                                        - group1
                                        - group2
                            auth:
                              type: array
                              description: all auth plugins are getting executed. first successful
                                authentication sets the consumer.
                              items:
                                type: object
                                properties:
                                  type:
                                    type: string
                                    description: name of the auth plugin
                                    example: basic-auth
                                  configuration:
                                    type: {}
                                    description: configuration for the plugin. can be of any type.
                                    nullable: true
                                    example:
                                      add_username_header: true
                            target:
                              type: object
                              nullable: true
                              properties:
                                type:
                                  type: string
                                  description: name of the target plugin. can only be one.
                                  example: target-flow
                                configuration:
                                  type: {}
                                  description: configuration for the plugin. can be of any type.
                                  nullable: true
                                  example:
                                    flow: /directory/myflow.yaml
  "/api/v2/namespaces/{namespace}/registries":
    get:
      tags:
        - registries
      summary: Get all namespace registries
      parameters:
        - $ref: "#/paths/~1api~1v2~1namespaces~1%7Bnamespace%7D~1files~1%7Bpath%7D/get/pa\
            rameters/0"
      responses:
        "200":
          description: Registries list returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: a unique string that represent id of the registry
                        namespace:
                          type: string
                          description: the namespace of registry belongs
                        url:
                          type: string
                          description: url of the registry
                        user:
                          type: string
                          description: anonymize username of the registry
    post:
      tags:
        - registries
      summary: Create a new registry secret
      requestBody:
        description: User data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  description: url of the registry
                user:
                  type: string
                  description: username of the registry
                password:
                  type: string
                  description: password string
      responses:
        "200":
          description: Created registry object returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: a unique string that represent id of the registry
                  namespace:
                    type: string
                    description: the namespace of registry belongs
                  url:
                    type: string
                    description: url of the registry
                  user:
                    type: string
                    description: anonymize username of the registry
  "/api/v2/namespaces/{namespace}/registries/{registryID}":
    delete:
      tags:
        - registries
      summary: Remove a registry secret
      parameters:
        - name: registryID
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Registry object deleted
  "/api/v2/namespaces/{namespace}/services":
    get:
      tags:
        - services
      summary: Get all services
      parameters:
        - $ref: "#/paths/~1api~1v2~1namespaces~1%7Bnamespace%7D~1files~1%7Bpath%7D/get/pa\
            rameters/0"
      responses:
        "200":
          description: Services list returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: a unique string that represent id of the service
                        type:
                          type: string
                          description: enum value ("workflow-service" or "namespace-service")
                        namespace:
                          type: string
                          description: the namespace of service belongs
                        name:
                          type: string
                          description: name of the service
                        filePath:
                          type: string
                          description: file path where this service is defined
                        image:
                          type: string
                          description: docker image of the service
                        cmd:
                          type: string
                          description: docker command
                        size:
                          type: string
                          description: can be 'large', 'medium' or 'small'
                        scale:
                          type: integer
                          description: number from 0 to 9
                        error:
                          type:
                            - string
                            - null
                          description: error string when service failed to be scheduled, otherwise null
                        envs:
                          type: array
                          nullable: false
                          description: environment variables used to exec the service
                          items:
                            type: object
                            properties:
                              name:
                                type: string
                                description: name of the variable
                              value:
                                type: string
                                description: value of the variable
                        conditions:
                          type: array
                          nullable: true
                          description: list of checks indicating the health checks of the service, null
                            value means the service is not scheduled yet
                          items:
                            type: object
                            properties:
                              type:
                                type: string
                                description: name of the check
                              status:
                                type: string
                                description: can be 'True', 'False' or 'Unknown'
                              message:
                                type: string
                                description: human readable message about the reason of this condition - can be
                                  empty
  "/api/v2/namespaces/{namespace}/services/{serviceID}/pods":
    get:
      tags:
        - services
      summary: Get all pods for a given service
      parameters:
        - $ref: "#/paths/~1api~1v2~1namespaces~1%7Bnamespace%7D~1files~1%7Bpath%7D/get/pa\
            rameters/0"
        - name: serviceID
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Pods list returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: a unique string that represent id of the pod
  "/api/v2/namespaces/{namespace}/services/{serviceID}/pods/{podID}/logs":
    get:
      tags:
        - services
      summary: Stream logs for a given pod
      parameters:
        - $ref: "#/paths/~1api~1v2~1namespaces~1%7Bnamespace%7D~1files~1%7Bpath%7D/get/pa\
            rameters/0"
        - $ref: "#/paths/~1api~1v2~1namespaces~1%7Bnamespace%7D~1services~1%7BserviceID%7\
            D~1pods/get/parameters/1"
        - name: podID
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Stream of plain text log data
  "/api/v2/namespaces/{namespace}/services/{serviceID}/actions/rebuild":
    post:
      tags:
        - services
      summary: Rebuilds service
      parameters:
        - $ref: "#/paths/~1api~1v2~1namespaces~1%7Bnamespace%7D~1files~1%7Bpath%7D/get/pa\
            rameters/0"
        - $ref: "#/paths/~1api~1v2~1namespaces~1%7Bnamespace%7D~1services~1%7BserviceID%7\
            D~1pods/get/parameters/1"
      responses:
        "200":
          description: Service rebuilds successfully
  /api/v2/version:
    get:
      summary: Get server version information.
      tags:
        - server
      responses:
        "200":
          description: Server version information.
          content:
            application/json:
              example:
                data: 1.0.0
              schema:
                type: object
                properties:
                  data:
                    type: string
